# -*- coding: utf-8 -*-
"""XGBoostipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mnt0TJgJoI8g4xC-8Tw1GYRadSy0yJ4R
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np 
import pandas as pd 
import seaborn as sns
import matplotlib.pyplot as plt
import xgboost as xgb
from xgboost import plot_importance, plot_tree
from sklearn.metrics import mean_squared_error, mean_absolute_error
plt.style.use('fivethirtyeight')

df = pd.read_excel('/content/drive/My Drive/TEZ/GercekZamanliTuketim.xlsx')
df=df.dropna()
print('Shape of data',df.shape)
df.head()
df

df["Tüketim Miktarı (MWh)"] = df["Tüketim Miktarı (MWh)"].str.replace(".","").str.replace(",",".")
df['Tüketim Miktarı (MWh)'] = df['Tüketim Miktarı (MWh)'].astype(float)

s = []
for i in df.Tarih:
    i = i+":00"
    s.append(i)

df["Zaman"] = s
df

df['Zaman'] = pd.to_datetime(df['Zaman'],format="%d.%m.%Y %H:%M:%S")
df.drop('Tarih',axis=1,inplace=True)
df.rename(columns={'Zaman':'Tarih'},inplace=True)
df = df[['Tarih','Tüketim Miktarı (MWh)']]
df.info()

ortalama=df.iloc[2091:2112,1:].mean()
df['Tüketim Miktarı (MWh)'].iloc[2090]=ortalama[0]

x=df.Tarih
y=df['Tüketim Miktarı (MWh)']

plt.figure(figsize=(25,8))
plt.plot(x,y,color='purple')
plt.grid()
plt.show()

"""**Train-Test**"""

split_date = '01.01.2019'
df_train = df.loc[df.Tarih <= split_date].copy()
df_test = df.loc[df.Tarih > split_date].copy()

plt.figure(figsize=(25,8))
plt.plot(df_train.Tarih,df_train['Tüketim Miktarı (MWh)'],label='Eğitim')
plt.plot(df_test.Tarih,df_test['Tüketim Miktarı (MWh)'],label='Test')
plt.legend(shadow=True,framealpha=0.9,edgecolor="black")
plt.show()

"""**Create Time Series Features**"""

def create_features(df1, label=None):
    """
    Creates time series features from datetime index.
    """
    df1 = df.copy()
    df1['date'] = df1.index
    df1['hour'] = df1['Tarih'].dt.hour
    df1['dayofweek'] = df1['Tarih'].dt.dayofweek
    df1['quarter'] = df1['Tarih'].dt.quarter
    df1['month'] = df1['Tarih'].dt.month
    df1['year'] = df1['Tarih'].dt.year
    df1['dayofyear'] = df1['Tarih'].dt.dayofyear
    df1['dayofmonth'] = df1['Tarih'].dt.day
    df1['weekofyear'] = df1['Tarih'].dt.weekofyear
    
    X = df1[['hour','dayofweek','quarter','month','year',
           'dayofyear','dayofmonth','weekofyear']]
    if label:
        y = df1[label]
        return X, y
    return X

X, y = create_features(df, label='Tüketim Miktarı (MWh)')

features_and_target = pd.concat([X, y], axis=1)

"""**XGBoost Modelini Oluşturma**"""

X_train, y_train = create_features(df_train, label='Tüketim Miktarı (MWh)')
X_test, y_test = create_features(df_test, label='Tüketim Miktarı (MWh)')

reg = xgb.XGBRegressor(n_estimators=1000)
reg.fit(X_train, y_train,
        eval_set=[(X_train, y_train), (X_test, y_test)],
        early_stopping_rounds=50,
        verbose=False)

"""**Feature Importances**

Feature importance is a great way to get a general idea about which features the model is relying on most to make the prediction. This is a metric that simply sums up how many times each feature is split on.

We can see that the day of year was most commonly used to split trees, while hour and year came in next. Quarter has low importance due to the fact that it could be created by different dayofyear splits.
"""

_ = plot_importance(reg, height=0.9)

"""**Forecast on Test Set**"""

xgb_pred= reg.predict(X_test)

plt.figure(figsize=(25,8))
plt.plot(df.Tarih,xgb_pred,label='Tahmin')
plt.scatter(df.Tarih,df['Tüketim Miktarı (MWh)'],color='r',label='Gerçek')
plt.legend(shadow=True,framealpha=0.9,edgecolor="black")
plt.show()

df_fcst=pd.DataFrame(xgb_pred,
                     columns=['Tahmin'])

df_fcst



"""**HATA METRİKLERİ**"""

mean_squared_error(y_true=y_test,
                   y_pred=xgb_pred)

mean_absolute_error(y_true=y_test,
                   y_pred=xgb_pred)

def mean_absolute_percentage_error(y_true, y_pred): 
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mean_absolute_percentage_error(y_true=y_test,y_pred=xgb_pred)

df_test['error'] = df_test['Tüketim Miktarı (MWh)'] - df_fcst['Tahmin']
df_test['abs_error'] = df_test['error'].apply(np.abs)

enkotu_gunler=df_test.sort_values('error', ascending=True).head(10)

eniyi_gunler=df_test.sort_values('abs_error', ascending=True).head(10)

plt.plot(eniyi_gunler.abs_error)
plt.plot(df['Tüketim Miktarı (MWh)'])